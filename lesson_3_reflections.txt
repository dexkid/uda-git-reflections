Q - When would you want to use a remote repository rather than keeping all your work
local?
Ans - When I would like to access my code from any machine and/or am collaborating with
other persons on the same repository.

Q - Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
Ans - Some times I may be working on some feature in a local repository.
Having Git automatically update / sync with remote repo could corrupt my local
file and overwrite the necessary changes. Hence git pull will be done manually.


Q - Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
Ans - Cloning a repo means copying a repo and its commits to a different place.
Fork is a special type of cloning on Github where in user2 can clone a user1 repo
into his Github account on Github servers as user2 can't make modifications
to user1 repo. In branching, the commits now diverge from the "master" branch.

When I am creating a new feature or solving a bug, I will use branch.
In order to ensure that I can access and modify my code from any machine,
I will clone it to Github or some online git service provider.
In case I have to start my work from a known code base on Github (like some open source
project), I will fork it to my Github account first.



Q- What is the benefit of having a copy of the last known state of the remote
stored locally?
Ans - If the last known state of the remote is stored locally then the local user
knows which are the changes s/he has done after the sync. This helps them to merge
correctly later on.

Q - How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?
Ans - I would make use of emails, chats and telephones in order to coordinate with
someone else. It wouldn't be easier as I would have to send across all the files
of my project to the person, with and without the modifications. Maybe a base code
and list of patches to apply. Then tell them to apply uptil patch # following which they may
do a code review. This is going to take an absurd amount of time/effort if the code base
is going to be huge.


Q - When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?
Ans - When working locally or as sole contributor to a project, it is better to work on
master directly. When we are collaboratively coding and creating new features and solving
bugs, it is better to have a branch.
